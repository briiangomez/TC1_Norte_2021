///////////////////////////////////////////////////////////
//  FamiliaPatente.cs
//  Implementation of the Class FamiliaPatente
//  Generated by Enterprise Architect
//  Created on:      14-may.-2021 21:47:32
//  Original author: gasto
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



namespace SL.Domain.Composite
{
	/// <summary>
	/// This class (a) declares the interface for objects in the composition, (b)
	/// implements default behaviour for the interface common to all classes, as
	/// appropriate, (c) declares an interface for accessing and managing its child
	/// components, and (d) optionally defines an interface for accessing a component's
	/// parent in the recursive structure and implements it if that's appropriate.
	/// </summary>
	public abstract class FamiliaPatente {

        public string Nombre { get; set; }

        public FamiliaPatente(){

		}

		/// 
		/// <param name="component"></param>
		public abstract void Add(FamiliaPatente component);

		/// 
		/// <param name="component"></param>
		public abstract void Remove(FamiliaPatente component);

		public abstract int ChildrenCount();
        

	}//end FamiliaPatente

}//end namespace Extra